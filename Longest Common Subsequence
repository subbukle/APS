// Here we need to find the longest common subsequence from a given sequence
// For this we use dynamic programming approach where we construct a 2D matrix where the row and column represent the sub-sequence and sequence.
//Approach:
//Initially the first row and column are initialised to zero.
//Then we start matching the letters, and in case of matching the value in the respective block is incremented by one.
//CODE-

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int fun_lcs(char *str1, char *str2, int len1, int len2)
{
    int i, j;
    int a[len1+1][len2+1];  // 2D matrix of one increased in row and column

    // starting with base cases of
    // First string is empty
    for(i = 0 ; i < len2; i++)
        a[0][i] = 0;       //first row initialized to 0

    // Second string empty
    for(i = 0; i <= len1; i++)
        a[i][0]=0;        // first column initialized to 0


    for(i = 1; i <= len1; i++)
        {
        for(j = 1; j <= len2; j++)
        {
            // When charatcers of both string match
            if(str1[i-1] == str2[j-1])    // i-1 because the matrix has been added with extra row and column
                a[i][j] = 1 + a[i-1][j-1];
            else
                a[i][j] = a[i-1][j] > a[i][j-1]  ? a[i-1][j] : a[i][j-1];  //ternary operator
    /* if(a[i-1][j]>a[i][j-1]
    a[i][j]=a[i-1][j]
    else a[i][j]=a[i]a[j-1]
    */
        }
        }
    return a[len1][len2];
}

int main()
{
    char str1[50] = "abcd";
    char str2[50] = "anybodycandance";
    int result=fun_lcs(str1, str2, strlen(str1), strlen(str2));
    printf("LCS for supplied input is:\n");
    printf("%d\n", result);

    return 0;
}

