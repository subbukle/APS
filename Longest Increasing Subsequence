//This is employed to the array of integers where we find the longest increasing subsequence
//logic
//1 - Initially we check the value present in two different index
//2 - In case if the number in second is greater than first then we move onto the second condition.
//3 - Here we consider another array which will be initialised to 1.
//4 - Then we increment the value in j index by one and compare it with the value in index i.
//5 - in case if the value in index j is greater than value in index i than it will update by value[j]+1.

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int longest_increasing_subsequence(int a[], int n)
{
    int i,j;
    int reference[n];
    int max=0;

    for(i = 0; i < n; i++)
        lis[i] = 1;      //initializing the entire array to 1.

  
    
    for(i = 1; i < n; i++)
    {
        for(j = 0; j < i; j++)
        {
            if(a[i] > a[j] && reference[i] < reference[j]+1)        // applying the steps 2,3,4 (mentioned above)
                reference[i] = reference[j]+1;
        }
    }

    for(i = 0; i < n; i++)
    {
        if(lis[i] > max)
            max = lis[i];  // finding the maximum from the array, the value will give maximum/longest subsequence
    }
    return max;
}

int main()
{
    int n = 6;
    // taking a predefined number of entries
    int a[] = {5, 11, 3, 15, 30, 25};
    
    int result = longest_increasing_subsequence(a,n);

    printf("Number of terms in Array is %d\n", result);
    return 0;
}

OUTPUT: Number of terms in Array is 4
